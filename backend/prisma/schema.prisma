// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int           @id @default(autoincrement())
  email               String        @unique
  userHandle          String        @unique
  linkedIn            String        @default("")
  githubHandle        String        @unique
  githubAccessToken   String        @default("")
  encryptedPassword   String
  firstName           String
  lastName            String
  profilePicture      String        @default("")
  businessAccount     Boolean       @default(false)
  featuredProjects    String[]      @default([])

  posts               Post[]        @relation(name: "post author")
  comments            Comment[]
  upvotedPosts        Upvote[]
  chatSenders         Chat[]        @relation(name: "chat sender")
  chatRecipients      Chat[]        @relation(name: "chat recipient")
  connectionSender    Connection[]  @relation(name: "connection sender")
  connectionRecipient Connection[]  @relation(name: "connection recipient")
  userInteraction     Interaction[] @relation(name: "interacting user")
  userTarget          Interaction[] @relation(name: "target user")
}

model Connection {
  id                  Int           @id @default(autoincrement())
  accepted            Boolean       @default(false)

  senderID            Int
  sender              User          @relation(fields: [senderID], references: [id], name: "connection sender", onDelete: Cascade)

  recipientID         Int
  recipient           User          @relation(fields: [recipientID], references: [id], name: "connection recipient", onDelete: Cascade)
}

model Interaction {
  id                  Int           @id @default(autoincrement())
  interactionDuration Int

  viewedProfile       Boolean       @default(false)

  viewedPost          Boolean       @default(false)
  postID              Int
  post                Post?         @relation(fields: [postID], references: [id], name: "post interaction")

  commented           Boolean       @default(false)
  commentID           Int
  comment             Comment?      @relation(fields: [commentID], references: [id], name: "comment interaction")

  interactingUserID   Int
  interactingUser     User          @relation(fields: [interactingUserID], references: [id], name: "interacting user")

  targetUserID        Int
  targetUser          User          @relation(fields: [targetUserID], references: [id], name: "target user")
}

model Post {
  id                  Int           @id @default(autoincrement())
  mediaURLs           String[]      @default([])
  tags                String[]      @default([])
  title               String
  tldr                String?
  date                String
  timestamp           String
  text                String
  upvoteCount         Int           @default(0)
  isRepost            Boolean       @default(false)

  repostedSourceID    Int?
  repsotedSource      Post?         @relation(fields: [repostedSourceID], references: [id], name: "reposts")

  authorID            Int
  author              User          @relation(fields: [authorID], references: [id], onDelete: Cascade, name: "post author")

  upvotes             Upvote[]
  comments            Comment[]
  reposters           Post[]        @relation(name: "reposts")
  postInteractions    Interaction[] @relation(name: "post interaction")
}

model Upvote {
  id                  Int           @id @default(autoincrement())

  postID              Int
  post                Post          @relation(fields: [postID], references: [id])

  userUpvoteID        Int
  userUpvote          User          @relation(fields: [userUpvoteID], references: [id])
}

model Comment {
  id                  Int           @id @default(autoincrement())
  commentText         String
  date                String
  timestamp           String
  upvotes             Int           @default(0)
  childComments       Comment[]     @relation(name: "replies")

  parentCommentID     Int?
  parentComment       Comment?      @relation(fields: [parentCommentID], references: [id], name: "replies", onDelete: Cascade)

  postID              Int
  post                Post          @relation(fields: [postID], references: [id], onDelete: Cascade)

  authorID            Int
  author              User          @relation(fields: [authorID], references: [id], onDelete: Cascade)

  commentInteraction  Interaction[] @relation(name: "comment interaction")
}

model Chat {
  id                  Int           @id @default(autoincrement())

  senderID            Int
  sender              User          @relation(fields: [senderID], references: [id], name: "chat sender")

  recipientID         Int
  recipient           User          @relation(fields: [recipientID], references: [id], name: "chat recipient", onDelete: Cascade)

  messages            Message[]
}

model Message {
  id                  Int           @id @default(autoincrement())
  text                String
  date                String
  timestamp           String

  chatID              Int
  chat                Chat          @relation(fields: [chatID], references: [id], onDelete: Cascade)
}
